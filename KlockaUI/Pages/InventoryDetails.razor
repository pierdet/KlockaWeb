@page "/inventory/{Id:int}"
@using KlockaLib.Data.Entities
@using KlockaUI.Models
@inject KlockaLib.Repositories.IInventoryRepository InventoryRepository
@inject NavigationManager NavigationManager


<h3>
    @inv.Name
    <span class="btn btn-primary" @onclick="BackToInventories">&#x25c0;</span>
</h3>

<!--TODO - Implement Modal https://www.telerik.com/blogs/creating-a-reusable-javascript-free-blazor-modal -->
<EditForm Model="@hostItem" OnValidSubmit="@AddHost">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText @bind-Value="hostItem.Name" />
    <InputText @bind-Value="hostItem.IpAddress" />
    <button type="submit" class="btn btn-primary">Add</button>
</EditForm>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Hostname</th>
            <th scope="col">Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var host in inv.Hosts)
        {
            <tr>
                <td>@host.Name</td>
                <td>@host.IpAddress</td>
                <td>@DisplayHostStatus(host)</td>
            </tr>

        }



    </tbody>
</table>

@code {
    [Parameter]
    public int Id { get; set; }

    private HostItem hostItem = new HostItem();

    Inventory inv;
    protected override void OnInitialized()
    {
        inv = InventoryRepository.GetById(Id);
    }

    void AddHost()
    {
        var newHost = new Host()
        {
            Name = hostItem.Name,
            IpAddress = hostItem.IpAddress,
        };
        inv.Hosts.Add(newHost);
        InventoryRepository.UpdateInventory(inv);
    }

    void BackToInventories()
    {
        NavigationManager.NavigateTo("/inventories");
    }

    string DisplayHostStatus(Host host)
    {
        switch (host.IsOnline)
        {
            case true:
                return "Online";
            case false:
                return "Offline";
            default:
                return "Unknown";
        }
    }
}
